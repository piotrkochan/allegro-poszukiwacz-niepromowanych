module.exports = function(grunt) {
  var browserify = require('browserify');
  var merge = require('merge-stream');
  var fs = require('fs');
  var preprocessify = require('preprocessify');
  var buffer = require('vinyl-buffer');
  var source = require('vinyl-source-stream');

  var $ = require('gulp-load-plugins')();

  var production = process.env.NODE_ENV === 'production';
  var target = process.env.TARGET || 'chrome';
  var environment = process.env.NODE_ENV || 'development';

  var generic = JSON.parse(fs.readFileSync('./config/' + environment + '.json'));
  var specific = JSON.parse(fs.readFileSync('./config/' + target + '.json'));
  var context = Object.assign({}, generic, specific);

  var defaultManifest = {
    dev: {
      'background': {
        'scripts': [
          'scripts/livereload.js',
          'scripts/icon-changer.js'
        ]
      }
    },
    firefox: { 'applications': { 'gecko': { 'id': 'allegro-poszukiwacz-niepromowanych@piotrkochan' } } }
  };

  grunt.initConfig({
    clean: {
      options: { force: true },
      build: ['./build/' + target + '/*']
    },
    sass: {
      options: {
        implementation: require('sass'), // Add this line
        outputStyle: 'expanded',
        precision: 10,
        includePaths: ['.']
      },
      dist: {
        files: [{
          expand: true,
          cwd: 'src/styles/',
          src: ['**/*.scss'],
          dest: './build/' + target + '/styles/',
          ext: '.css'
        }]
      }
    },
    manifest: {
      options: {
        defaultManifest: defaultManifest.dev,
        targetManifest: defaultManifest[target]
      },
      dist: {
        src: './manifest.json',
        dest: './build/' + target + '/manifest.json'
      }
    },
    browserify: {
      options: {
        transform: [['babelify', { presets: ['@babel/preset-env'] }]],
        debug: true
      },
      dist: {
        files: [{
          expand: true,
          cwd: 'src/scripts/',
          src: [
            'contentscript.js',
            'icon-changer.js',
            'popup.js'
          ],
          dest: './build/' + target + '/scripts',
          ext: '.js'
        }]
      }
    },
    uglify: {
      dist: {
        files: [{
          expand: true,
          cwd: './build/' + target + '/scripts',
          src: '**/*.js',
          dest: './build/' + target + '/scripts'
        }]
      }
    },
    // sourcemaps: {
    //   dist: {
    //     options: { loadMaps: true },
    //     files: [{
    //       expand: true,
    //       cwd: './build/' + target + '/scripts',
    //       src: '**/*.js.map',
    //       dest: './build/' + target + '/scripts'
    //     }]
    //   }
    // },
    copy: {
      icons: {
        files: [{
          expand: true,
          cwd: 'src/icons/',
          src: '**/*',
          dest: './build/' + target + '/icons'
        }]
      },
      locales: {
        files: [{
          expand: true,
          cwd: 'src/_locales/',
          src: '**/*',
          dest: './build/' + target + '/_locales'
        }]
      },
      images: {
        files: [{
          expand: true,
          cwd: 'src/images/' + target + '/',
          src: '**/*',
          dest: './build/' + target + '/images'
        }, {
          expand: true,
          cwd: 'src/images/shared/',
          src: '**/*',
          dest: './build/' + target + '/images'
        }]
      },
      html: {
        files: [{
          expand: true,
          cwd: 'src/',
          src: '**/*.html',
          dest: './build/' + target
        }]
      }
    },
    zip: {
      dist: {
        cwd: './build/' + target,
        src: './build/' + target + '/**/*',
        dest: './dist/' + target + '.zip'
      }
    },
    watch: {
      options: { livereload: true },
      scripts: {
        files: ['./src/scripts/**/*.js'],
        tasks: ['browserify', 'uglify']
      },
      styles: {
        files: ['./src/styles/**/*.scss'],
        tasks: ['sass']
      },
      other: {
        files: ['./src/**/*', '!./src/scripts/**/*.js', '!./src/styles/**/*.scss'],
        tasks: ['copy']
      },
      manifest: {
        files: ['./manifest.json'],
        tasks: ['manifest']
      }
    }
  });

  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-sass');
  grunt.loadNpmTasks('grunt-manifest');
  grunt.loadNpmTasks('grunt-browserify');
  grunt.loadNpmTasks('grunt-contrib-uglify');
//   grunt.loadNpmTasks('grunt-sourcemaps');
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-zip');
  grunt.loadNpmTasks('grunt-contrib-watch');

  grunt.registerTask('assets', ['sass', 'browserify', 'uglify']);
  grunt.registerTask('build', ['clean', 'assets', 'copy', 'manifest']);
  grunt.registerTask('dist', ['build', 'zip']);
  grunt.registerTask('dev', ['build', 'watch']);

  grunt.registerTask('default', ['build']);
};
